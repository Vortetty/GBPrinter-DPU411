#include <Arduino.h>
#include <ArduinoJson.h>
#include <bitset>
#include <queue>
#include <string>

typedef uint8_t imageTile[16];

std::bitset<160 * 200 * 2> imageBits;  // GB Printer has an 8KiB memory to store images
                                       // each image is *up to* 160*200px, at 2bpp
                                       // so a 64Kb or 7.8125KiB buffer is needed

std::queue<std::string> lines;  // Store the data sent from the UNO, only data commands, init commands, and print commands should end up in here
char readBuffer[128] = {0};     // Buffer for each line as it comes in, the longest line it should send is generally 75 bytes (print command) so this just ensures that we have space for extra! better safe than sorry when i have memory to spare
JsonDocument doc;               // Document for decoding json lines

void loop() {
    while (true) {                                                      // Run until break condition
        while (!Serial1.available());                                   // Wait for serial to be available, then continue
        uint8_t len = Serial1.readBytesUntil('\n', readBuffer, 128);    // Read in a line from serial

        if (readBuffer[0] == '&' || readBuffer[0] == '%') { // Check command type, will either be json or data, any comments or blank lines are ignored
            lines.push(std::string(readBuffer));            // Store command/data in buffer
            Serial.println(readBuffer);                     // Echo to USBSerial
            if (readBuffer[len-2] == '$') {                 // If command ends with a $ sign, that means it's a print command
                                                            // Was easier to implement it this way than to parse json on the data read loop
                memset(readBuffer, 0, 128);                 // Clear read buffer
                break;                                      // Escape loop; move to printing
            }
        } else {
            // nothing since i don't care about empty lines and comments
        }

        memset(readBuffer, 0, 128); // Clear read buffer
    }

    // Memory debug, just wanna make sure i don't use too much, which should never happen but this can help debug if it does.
    // I removed inquiry commands from the output specifically to prevent issues with memory, since i don't care about the fake printer's status anyway
    Serial.printf("%.2f/%.2fKiB used (%.2fKiB free)\n", rp2040.getUsedHeap()/1024.0f, rp2040.getTotalHeap()/1024.0f, rp2040.getFreeHeap()/1024.0f);
    Serial.printf("%i lines stored\n", lines.size());

    // Begin decoding, just gonna read through each command
    // This will take a second or two
    // Possible lines:
    //                                                         %{"command":"INIT"} | Clear all buffers and prepare to recieve data
    //                                          %{"command":"D","end":0,"len":640} | Data sent, length will be a multiple of 16 bytes (1 gb tile)
    //                                            %{"command":"D","end":1,"len":0} | Denotes end of data, prepare to print
    // %{"command":"P","shts":1,"mrgnupr":1,"mrgnlwr":3,"palette":228,"dnsty":73}$ | Print
    //                                                                                    shts: Copies to print
    //                                                                                 mrgnupr: Blank pixels above
    //                                                                                 mrgnlwr: Blank pixels below
    //                                                                                 palette: 228 is the most common, can be ignored until i get data on other palettes and what colors they use
    //                                                                                   dnsty: 7-bit value for exposure time, 0 is -25%, 127 is +25%, 64 is the normal darkness
}

void setup() {
    // USB Serial, flow control ignore makes it work on linux
    // Bug had been reported (https://github.com/earlephilhower/arduino-pico/issues/2023) but noone seems to have been able to fix it so who knows
    // Sending serial data in the setup loop seems to softlock the board, so that's fun
    Serial.begin(115200);
    Serial.ignoreFlowControl(true);
    while (!Serial);

    // Hardware UART 1, on pins 0/1, larger fifo just incase there's a short hang while processing data into duffers
    // Serial between the UNO and the pico, worth noting the uno's serialusb is echoed to both usb and the pico
    // So if the UNO has issues, one could disable the serial filter in the loop temporarily to debug it.
    Serial1.setTX(0);
    Serial1.setRX(1);
    Serial1.setFIFOSize(256);
    Serial1.begin(115200);
    while (!Serial1);
}